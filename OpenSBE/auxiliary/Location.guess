# Open Software Building Environment (OpenSBE, OSBE)
# Copyright (C) 2001-2002 Boris Kolpackov
# Copyright (C) 2001-2004 Pavel Gubin, Karen Arutyunov
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# File   : Location.guess
# Author : Karen Arutyunov <karen@ipmce.ru>
#
# Introduces osbe_guess_location and osbe_guess_each_location functions.

echo=${echo-"echo"}

#
# Revert path. /A/B/C become /C/B/A
#
# $1 - path to revert
#
_osbe_revert_path()
{
  _osbe_revert_path__reverted_path=""
  _osbe_revert_path__path="$1"

  while test -n "$_osbe_revert_path__path" -a "$_osbe_revert_path__path" != "." \
             -a "$_osbe_revert_path__path" != "/"; do

    _osbe_revert_path__bname=`basename $_osbe_revert_path__path`

    if test -z "$_osbe_revert_path__path"; then
      _osbe_revert_path__reverted_path="$_osbe_revert_path__bname"
    else
      _osbe_revert_path__reverted_path=\
"$_osbe_revert_path__reverted_path/$_osbe_revert_path__bname"
    fi

    _osbe_revert_path__path=`dirname $_osbe_revert_path__path`

  done

  $echo "$_osbe_revert_path__reverted_path"

  return 0
}

#
# Determines longest directory path containing all files specified
#
# $1 - file list
#
_osbe_common_location()
{
  _osbe_cl__found_files="$1"

  if test `osbe_list_size "$_osbe_cl__found_files"` -lt 2; then
    $echo "$_osbe_cl__found_files"
    return 0
  fi

  #
  # Reverting base paths,
  # like "/home/karen/projects/OpenSBE/src" goes to
  # "/src/OpenSBE/projects/karen/home"
  #
  _osbe_cl__reverted_paths=""
  for _osbe_cl__file in $_osbe_cl__found_files; do

    _osbe_cl__reverted=`_osbe_revert_path $_osbe_cl__file`
    _osbe_cl__reverted_paths="$_osbe_cl__reverted_paths \
$_osbe_cl__reverted"

  done

#  $echo "Reverted: $_osbe_cl__reverted_paths"

  #
  # Obtaining location at last, which is longest common path,
  # like "/home/karen/projects/OpenSBE" for
  # "/home/karen/projects/OpenSBE/src/config /home/karen/projects/OpenSBE/bin"
  #
  _osbe_cl__location=""
  _osbe_cl__break=""
  while test -z "$_osbe_cl__break"; do

#    $echo "" 1>&2
#    $echo "_osbe_cl__reverted_paths: $_osbe_cl__reverted_paths" 1>&2

    _osbe_cl__name=""
    _osbe_cl__new_reverted_paths=""
    for _osbe_cl__path in $_osbe_cl__reverted_paths; do

      _osbe_cl__bname=`basename $_osbe_cl__path`
      _osbe_cl__dirname=`dirname $_osbe_cl__path`

      _osbe_cl__new_reverted_paths=\
"$_osbe_cl__new_reverted_paths $_osbe_cl__dirname"

      if test -z "$_osbe_cl__name" -o \
         "$_osbe_cl__name" = "$_osbe_cl__bname"; then
        _osbe_cl__name="$_osbe_cl__bname"
      else
        _osbe_cl__break=1
      fi
    done

#    $echo "_osbe_cl__name: $_osbe_cl__name" 1>&2
#    $echo "_osbe_cl__new_reverted_paths: $_osbe_cl__new_reverted_paths" 1>&2

    if test -z "$_osbe_cl__name" -o "$_osbe_cl__name" = "/"; then
      _osbe_cl__break=1
    fi

#    $echo "_osbe_cl__break: $_osbe_cl__break" 1>&2

    if test -z "$_osbe_cl__break"; then
      _osbe_cl__reverted_paths="$_osbe_cl__new_reverted_paths"
      _osbe_cl__location="$_osbe_cl__location/$_osbe_cl__name"
    fi
  done

  $echo "$_osbe_cl__location"
  return 0
}

#
# Search for location of specified relative paths.
# Return longest common path
#
# $1 - possibly container directory
# $2 - possibly contained directory
#
_osbe_contain()
{
  #$echo "_osbe_contain $1, $2" 1>&2

  _osbe_contain__container="$1"
  _osbe_contain__contained="$2"

  while test -n "$_osbe_contain__contained" -a \
        "$_osbe_contain__contained" != "/"; do

#    $echo "$_osbe_contain__contained" 1>&2

    if test "$_osbe_contain__contained" = "$_osbe_contain__container"; then

#      $echo "$1 contain $2" 1>&2

      $echo "1"
      return 0
    fi

    _osbe_contain__contained=`dirname $_osbe_contain__contained`

  done

  $echo "0"
}

#
# Suppreses paths which contain other paths in the list.
#
# $1 - path list
#
_osbe_suppress_containtments()
{
 _osbe_sc__locations="$1"

  _osbe_sc__repeat="1"
  while test -n "$_osbe_sc__repeat"; do

    _osbe_sc__repeat=""

#    $echo "" 1>&2
#    $echo "_osbe_sc__locations: $_osbe_sc__locations" 1>&2

    _osbe_sc__final_locations=""
    for _osbe_sc__location in $_osbe_sc__locations; do

      _osbe_sc__break=""
      for _osbe_sc__final_location in $_osbe_sc__final_locations; do

        if test `_osbe_contain $_osbe_sc__location $_osbe_sc__final_location` \
           = 1; then
          _osbe_sc__break=1
        fi

        if test `_osbe_contain $_osbe_sc__final_location $_osbe_sc__location` \
           = 1; then
          _osbe_sc__repeat=1
        fi

      done

      if test -z "$_osbe_sc__break"; then
        if test -z "$_osbe_sc__final_locations"; then
          _osbe_sc__final_locations="$_osbe_sc__location"
        else
          _osbe_sc__final_locations=\
"$_osbe_sc__location $_osbe_sc__final_locations"
        fi
      fi

#      $echo "_osbe_sc__final_locations: $_osbe_sc__final_locations" 1>&2

      _osbe_sc__locations="$_osbe_sc__final_locations"

    done

#    if test -n "$_osbe_sc__repeat"; then
#      $echo "Repeating ..." 1>&2
#    fi

  done

  $echo "$_osbe_sc__locations"
}

#
# Search for location of specified relative paths.
# Return longest common path
#
# $1 - directory to search from
# $2 - space separated list of relative paths (seach hints)
# $3 - [optional] name of a function providing additional find command options
#      for relative path passed as a first parameter
# $4 - [optional] name of a function testing if a file considered as a hint
#      can be acknowledged as a hint
#
_osbe_guess_location_single_place()
{
  _osbe_glsp__search_path="$1"
  _osbe_glsp__relative_path="$2"
  _osbe_glsp__find_options_function="$3"
  _osbe_glsp__acknowledge_function="$4"

  _osbe_glsp__found_files=""

  for _osbe_glsp__rel_path in $_osbe_glsp__relative_path; do

#    $echo "_osbe_glsp__rel_path: $_osbe_glsp__rel_path" 1>&2

    if test "$_osbe_guess_location__case_sensitive_path" = "1"; then
      _osbe_glsp__command=\
"find $_osbe_glsp__search_path -wholename '*/$_osbe_glsp__rel_path'"
    else
      _osbe_glsp__command=\
"find $_osbe_glsp__search_path -iwholename '*/$_osbe_glsp__rel_path'"
    fi

    if test -z "$_osbe_glsp__find_options_function"; then
      _osbe_glsp__options=""
    else
      _osbe_glsp__options=\
`$_osbe_glsp__find_options_function $_osbe_glsp__rel_path`
    fi

    if test -n "$_osbe_glsp__options"; then
      _osbe_glsp__command=\
"$_osbe_glsp__command -a \( $_osbe_glsp__options \)"
    fi

#   $echo "_osbe_glsp__command: $_osbe_glsp__command" 1>&2

    _osbe_glsp__path_list=`eval "$_osbe_glsp__command 2>/dev/null"`

#   $echo "_osbe_glsp__path_list: $_osbe_glsp__path_list" 1>&2

    _osbe_glsp__files=""
    for _osbe_glsp__path_list_item in $_osbe_glsp__path_list; do

        _osbe_glsp__hint_acknowledged="1"

        if test -n "$_osbe_glsp__acknowledge_function"; then
          _osbe_glsp__hint_acknowledged=\
`$_osbe_glsp__acknowledge_function "$_osbe_glsp__path_list_item" \
                                   "$_osbe_glsp__rel_path"`
        fi

        if test "$_osbe_glsp__hint_acknowledged" = "1"; then

          if test "$_osbe_guess_location__case_sensitive_path" = "1"; then
            _osbe_glsp__base_path=\
`$echo "$_osbe_glsp__path_list_item"|sed -n -e "s%/$_osbe_glsp__rel_path\$%%p"`
          else
            _osbe_glsp__base_path=\
`$echo "$_osbe_glsp__path_list_item"|sed -n -e "s%/$_osbe_glsp__rel_path\$%%Ip"`
          fi

#          $echo "_osbe_glsp__base_path: $_osbe_glsp__base_path" 1>&2
          _osbe_glsp__files="$_osbe_glsp__files $_osbe_glsp__base_path"
        fi


    done

#    $echo "Files $_osbe_glsp__rel_path : $_osbe_glsp__files" 1>&2

    if test -z "$_osbe_glsp__files"; then
      return 1
    fi

    _osbe_glsp__found_files=\
`osbe_list_aggregate "$_osbe_glsp__found_files" "$_osbe_glsp__files"`
#    $echo "_osbe_glsp__found_files: $_osbe_glsp__found_files" 1>&2

  done

  _osbe_glsp__locations=""
  _osbe_glsp__file_group=""

  for _osbe_glsp__found_file in $_osbe_glsp__found_files; do
    if test "$_osbe_glsp__found_file" = ":"; then

      _osbe_glsp__common_location=\
`_osbe_common_location "$_osbe_glsp__file_group"`
      _osbe_glsp__file_group=""

      _osbe_glsp__locations=\
"$_osbe_glsp__locations $_osbe_glsp__common_location"

    else

      _osbe_glsp__file_group="$_osbe_glsp__file_group $_osbe_glsp__found_file"

    fi
  done

  _osbe_glsp__locations=`_osbe_suppress_containtments "$_osbe_glsp__locations"`

  $echo "$_osbe_glsp__locations"
}

#
# Search for location of specified relative paths.
# Return longest common path.
#
# $1 - space separated list of directories to search from
# $2 - space separated list of relative paths
# $3 - [optional] name of a function providing additional find command options
#      for relative path passed as a first parameter
# $4 - [optional] name of a function testing if a file considered as a hint
#      can be acknowledged as a hint. Hint full path is passed as a first
#      parameter to this function, relative path as a second.
#
osbe_guess_location_silent()
{
  #echo "osbe_guess_location_silent '$1' '$2' '$3' '$4'" >&2

  if test "$osbe_enable_guess_location" = "0"; then
    $echo ""
    return 1
  fi

  _osbe_guess_location__all_locations=""
  for _osbe_guess_location__search_path in $1; do

    _osbe_guess_location__locations=\
`_osbe_guess_location_single_place "$_osbe_guess_location__search_path" "$2" "$3" "$4"`

#    $echo "_osbe_guess_location__locations: $_osbe_guess_location__locations" 1>&2

    for _osbe_guess_location__one_location in \
        $_osbe_guess_location__locations; do

      if test -z "$_osbe_guess_location__all_locations"; then
        _osbe_guess_location__all_locations=\
"$_osbe_guess_location__one_location"
      else
        _osbe_guess_location__all_locations=\
"$_osbe_guess_location__all_locations $_osbe_guess_location__one_location"
      fi

    done

  done

#  $echo "_osbe_guess_location__all_locations: $_osbe_guess_location__all_locations" 1>&2

  _osbe_suppress_containtments "$_osbe_guess_location__all_locations"
}

#
# Search for location of specified relative paths.
# Return longest common path.
#
# $1 - description of what we're looking for
# $2 - space separated list of directories to search from
# $3 - space separated list of relative paths
# $4 - [optional] name of a function providing additional find command options
#      for relative path passed as a first parameter
# $5 - [optional] name of a function testing if a file considered as a hint
#      can be acknowledged as a hint. Hint full path is passed as a first
#      parameter to this function, relative path as a second.
#
osbe_guess_location ()
{
  _osbe_msg_checking "whether something looks like $1 under $2
( to disable this check use --enable-guess-location=no option )"

  _osbe_guess_location__locations=\
`osbe_guess_location_silent "$2" "$3" "$4" "$5"`

  case `osbe_list_size "$_osbe_guess_location__locations"` in
    0) _osbe_guess_location__result="no";;
    1) _osbe_guess_location__result="single";;
    *) _osbe_guess_location__result="multiple";;
  esac

  _osbe_msg_result "$_osbe_guess_location__result"

  $echo "$_osbe_guess_location__locations"
}

#
# Search for location of each specified relative paths.
# Return list of longest paths suppressing duplications.
#
# $1 - space separated list of directories to search from
# $2 - space separated list of relative paths
# $3 - printable string of what we're searching for
# $4 - resulting variable name
# $5 - [optional] name of a function providing additional find command options
#      for relative path passed as a first parameter
# $6 - [optional] name of a function testing if a file considered as a hint
#      can be acknowledged as a hint. Hint full path is passed as a first
#      parameter to this function, relative path as a second.
#
osbe_guess_each_location()
{
  #echo "osbe_guess_each_location '$1' '$2' '$3' '$4' '$5' '$6'" >&2

  _osbe_msg_checking "path(s) to $3 under $1
( to disable this check use --enable-guess-location=no option )"

  eval $4=""

  if test "$osbe_enable_guess_location" = "0"; then
    _osbe_msg_result "disabled"
    return 1
  fi

  _osbe_guess_each_location__result=""
  _osbe_guess_each_location__locations_aggregated_list=""

#  $echo "" 1>&2

  for _osbe_guess_each_location__path in $2; do

    _osbe_guess_each_location__location=\
`osbe_guess_location_silent "$1" "$_osbe_guess_each_location__path" "$5" "$6"`

#    $echo "_osbe_guess_each_location__path: $_osbe_guess_each_location__path" 1>&2
#    $echo "_osbe_guess_each_location__location: $_osbe_guess_each_location__location" 1>&2

    if test `osbe_list_size "$_osbe_guess_each_location__location"` -lt 1; then
      _osbe_msg_result "not found"
      _osbe_msg_notice "Path(s) to $3 :"
      return 1
    fi

    _osbe_guess_each_location__locations_aggregated_list=\
`osbe_list_aggregate "$_osbe_guess_each_location__locations_aggregated_list" \
"$_osbe_guess_each_location__location"`

#  $echo "_osbe_guess_each_location__locations_aggregated_list: \
#$_osbe_guess_each_location__locations_aggregated_list" 1>&2
#  $echo "" 1>&2

  done

#  $echo "_osbe_guess_each_location__locations_aggregated_list: \
#$_osbe_guess_each_location__locations_aggregated_list" 1>&2

  _osbe_guess_each_location__list_number="0"
  _osbe_guess_each_location__list_numbers=""
  _osbe_guess_each_location__list=""

  _osbe_guess_each_location__list_smallest_size=32000
  _osbe_guess_each_location__list_cur_size=0

  for _osbe_guess_each_location__location in \
$_osbe_guess_each_location__locations_aggregated_list; do

    if test "$_osbe_guess_each_location__location" = ":"; then

      if test "$_osbe_guess_each_location__list_cur_size" -lt \
        "$_osbe_guess_each_location__list_smallest_size"; then
        _osbe_guess_each_location__list_number=0
        _osbe_guess_each_location__list_numbers=
        _osbe_guess_each_location__list_smallest_size=\
"$_osbe_guess_each_location__list_cur_size"
      fi

      if test "$_osbe_guess_each_location__list_cur_size" -eq \
        "$_osbe_guess_each_location__list_smallest_size"; then

        _osbe_guess_each_location__list_number=\
`expr ${_osbe_guess_each_location__list_number} + 1`

        eval "_osbe_guess_each_location__list"\
"${_osbe_guess_each_location__list_number}"=\
"\"\${_osbe_guess_each_location__list}\""

        _osbe_guess_each_location__list_numbers=\
"${_osbe_guess_each_location__list_numbers}"\
"${_osbe_guess_each_location__list_number} "

      fi

      _osbe_guess_each_location__list=""
      _osbe_guess_each_location__list_cur_size="0"

    else
      _osbe_guess_each_location__list_cur_size=\
`expr $_osbe_guess_each_location__list_cur_size + 1`
      _osbe_guess_each_location__list=\
"$_osbe_guess_each_location__list$_osbe_guess_each_location__location "
    fi

  done

  if test $_osbe_guess_each_location__list_number -gt 0; then
    if test $_osbe_guess_each_location__list_number -gt 1; then
      _osbe_msg_result "multiple"
    else
      _osbe_msg_result "single"
    fi
  else
    _osbe_msg_result "none"
  fi

  osbe_multiple_choice "path(s) to $3" \
                       "Path(s) to $3" \
                       "$_osbe_guess_each_location__list_numbers" \
                       _osbe_guess_each_location__list \
                       $4
}

LOCATION_GUESS_PATH=${LOCATION_GUESS_PATH-"/usr /opt"}

_osbe_guess_location__case_sensitive_path="1"

case $host_os in
  cygwin*) _osbe_guess_location__case_sensitive_path="0";;
esac

