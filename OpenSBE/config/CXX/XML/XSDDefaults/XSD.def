# Open Software Building Environment (OpenSBE, OSBE)
# Copyright (C) 2001-2002 Boris Kolpackov
# Copyright (C) 2001-2004 Pavel Gubin, Karen Arutyunov
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# File   : XSD.def
# Author : Karen Arutyunov <karen@ipmce.ru>

case $host_os in
  cygwin*)
    XSD_cxx_xml_xsd_translator_defs__lib_prefix=
    XSD_cxx_xml_xsd_translator_defs__lib_suffix=.lib
    XSD_cxx_xml_xsd_translator_defs__lib_debug_suffix=d.lib
    XSD_cxx_xml_xsd_translator_defs__exe_suffix=.exe
    ;;
  *)
    XSD_cxx_xml_xsd_translator_defs__lib_prefix=lib
    XSD_cxx_xml_xsd_translator_defs__lib_suffix=.so
    XSD_cxx_xml_xsd_translator_defs__lib_debug_suffix=d.so
    XSD_cxx_xml_xsd_translator_defs__exe_suffix=
    ;;
esac

cxx_xml_xsd_translator_identifier="XSD"
cxx_xml_xsd_translator_known_name="Code Synthesis XSD to C++ translator"
cxx_xml_xsd_translator_platforms='cygwin% linux% darwin%'

cxx_xml_xsd_translator_default_for_platforms=\
"$cxx_xml_xsd_translator_platforms"

cxx_xml_xsd_translator_location_search_hint=\
"xsd/cxx/pre.hxx xsd$XSD_cxx_xml_xsd_translator_defs__exe_suffix"
cxx_xml_xsd_translator_location_search_opt_func="XSD_cxx_search_opt_func"
cxx_xml_xsd_translator_location_search_acknowledge_func=\
"XSD_cxx_search_acknowledge_func"

XSD_cxx_xml_xsd_translator_defs()
{
  if test "$osbe_enable_guess_location" -eq "0" -o \
     "`osbe_var_undefined CXX_XML_XSD_TRANSLATOR`" -eq "0" -a \
     "`osbe_var_undefined CXX_XML_XSD_CPPFLAGS`" -eq "0" -a \
     "`osbe_var_undefined CXX_XML_XSD_LDFLAGS`" -eq "0" -a \
     "`osbe_var_undefined CXX_XML_XSD_LIBS`" -eq "0"
   then
    XSD_cxx_xml_xsd_translator_defs__no_guess_location="1"
  else
    XSD_cxx_xml_xsd_translator_defs__no_guess_location="0"
  fi

  if test -n "$cxx_xml_xsd_translator_dir"; then

#
# Detecting CXX_XML_XSD_TRANSLATOR
#
    if test "`osbe_var_undefined CXX_XML_XSD_TRANSLATOR`" -eq "1"; then

      XSD_cxx_xml_xsd_translator_defs__translator=\
"xsd$XSD_cxx_xml_xsd_translator_defs__exe_suffix"

      if test "$osbe_enable_guess_location" -eq "1"; then
#
# If allowed to guess, will detect translator path
#
        XSD_cxx_xml_xsd_translator_defs__translator_path=\
`osbe_guess_location "XSD translator" \
                     "$cxx_xml_xsd_translator_dir" \
                     "$XSD_cxx_xml_xsd_translator_defs__translator" \
                     "XSD_cxx_search_opt_func"`

        if test -n "$XSD_cxx_xml_xsd_translator_defs__translator_path"; then
          CXX_XML_XSD_TRANSLATOR=\
`osbe_suffix_words "/$XSD_cxx_xml_xsd_translator_defs__translator" \
                   "$XSD_cxx_xml_xsd_translator_defs__translator_path"`
        fi

      else
#
# If not allowed to guess, will just assign most probable translator path
#
        CXX_XML_XSD_TRANSLATOR="$cxx_xml_xsd_translator_dir/bin/xsd"
      fi

    fi

#
# Detecting CXX_XML_XSD_CPPFLAGS
#
    if test "`osbe_var_undefined CXX_XML_XSD_CPPFLAGS`" -eq "1"; then

      if test "$osbe_enable_guess_location" -eq "1"; then
#
# If allowed to guess, will detect C++ include paths for XSD
#
        osbe_guess_each_location "$cxx_xml_xsd_translator_dir" \
                                 "xsd/cxx/pre.hxx" \
                                 "XSD headers" \
                                 XSD_cxx_xml_xsd_translator_defs__include_path \
                                 "XSD_cxx_search_opt_func" \
                                 "XSD_cxx_search_acknowledge_func"

      else
#
# If not allowed to guess, will just assign most probable C++ include paths
#
        XSD_cxx_xml_xsd_translator_defs__include_path=\
"$cxx_xml_xsd_translator_dir/include"

      fi

      if test -n "$XSD_cxx_xml_xsd_translator_defs__include_path"; then
        CXX_XML_XSD_CPPFLAGS=\
`osbe_prefix_words "-I" "$XSD_cxx_xml_xsd_translator_defs__include_path"`
      fi

    fi

  fi


  if test "`osbe_var_undefined CXX_XML_XSD_TRANSLATOR_TREE_FLAGS`" -eq "1"; then
    CXX_XML_XSD_TRANSLATOR_TREE_FLAGS=\
"--namespace-regex \"|^XMLSchema.xsd http://www.w3.org/2001/XMLSchema\$|xml_schema|\""
  fi

  if test "`osbe_var_undefined CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS`" -eq "1"; then
    CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS=\
"--namespace-regex \"|^XMLSchema.xsd http://www.w3.org/2001/XMLSchema\$|xml_schema_parser|\""
  fi
}

XSD_cxx_xml_xsd_translator_postconfig()
{
  CXX_XML_XSD_TRANSLATOR_OUTPUTDIRFLAG="--output-dir"

  CXX_XML_XSD_TRANSLATOR_COMMON_FLAGS=\
"${CXX_XML_XSD_EXTRA_TRANSLATOR_FLAGS} \
--hxx-suffix .hpp \
--ixx-suffix .ipp \
--cxx-suffix .cpp"

CXX_XML_XSD_TRANSLATOR_TREE_FLAGS=\
"${CXX_XML_XSD_TRANSLATOR_TREE_FLAGS} \
--fwd-suffix -fwd.hpp"

CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS=\
"${CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS} \
--skel-file-suffix \"\""


CXX_XML_XSD_TRANSLATOR_POST_RULES_FOR_TREE=\
'CXX_XML_XSD_TRANSLATOR_REAL_FLAGS = cxx-tree $(CXX_XML_XSD_TRANSLATOR_COMMON_FLAGS) $(CXX_XML_XSD_TRANSLATOR_FLAGS) $(CXX_XML_XSD_TRANSLATOR_TREE_FLAGS)'

CXX_XML_XSD_TRANSLATOR_POST_RULES_FOR_PARSER=\
'CXX_XML_XSD_TRANSLATOR_REAL_FLAGS = cxx-parser $(CXX_XML_XSD_TRANSLATOR_COMMON_FLAGS) $(CXX_XML_XSD_TRANSLATOR_FLAGS) $(CXX_XML_XSD_TRANSLATOR_REAL_PARSER_FLAGS)'

CXX_XML_XSD_TRANSLATOR_POST_RULES='
ifneq ($(xsd_type_map),)

CXX_XML_XSD_TRANSLATOR_REAL_PARSER_FLAGS = $(CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS) --type-map $(or $(filter $(xsd_type_map),$^),$(firstword $(filter %/$(xsd_type_map),$^)))

$(_xml_xsd_bindings) : $(xsd_type_map)

else

CXX_XML_XSD_TRANSLATOR_REAL_PARSER_FLAGS := $(CXX_XML_XSD_TRANSLATOR_PARSER_FLAGS)

endif

xml_xsd_headers += $(patsubst %.hpp,%.ipp,$(xml_xsd_headers)) $(patsubst %.hpp,%-fwd.hpp,$(xml_xsd_headers))

'

  osbe_cxx_use_lib "xsd_xerces" \
                   "Xerces for XSD" \
                   "" \
                   "" \
                   "xerces-c" \
                   "" \
                   "External/XSD_Xerces.pre.rules" \
                   "xercesc/util/XercesVersion.hpp \
${XSD_cxx_xml_xsd_translator_defs__lib_prefix}xerces-c\
$XSD_cxx_xml_xsd_translator_defs__lib_suffix"

  CXX_XML_XSD_TRANSLATOR_LIBRARIES=\
"include \$(osbe_builddir)/config/CXX/External/XSD_Xerces.pre.rules"
}

XSD_cxx_search_opt_func()
{
  $echo "-type f -o -type l"
}

XSD_cxx_search_acknowledge_func()
{
  XSD_cxx_search_acknowledge_func__signature=`cat "$1"|grep -a "Code Synthesis "`

  if test -z "$XSD_cxx_search_acknowledge_func__signature"; then
    $echo "0"
  else
    $echo "1"
  fi
}
